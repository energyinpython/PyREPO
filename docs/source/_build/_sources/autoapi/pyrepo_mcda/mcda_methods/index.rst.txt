:py:mod:`pyrepo_mcda.mcda_methods`
==================================

.. py:module:: pyrepo_mcda.mcda_methods


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   codas/index.rst
   edas/index.rst
   mabac/index.rst
   mcda_method/index.rst
   multimoora/index.rst
   spotis/index.rst
   topsis/index.rst
   vikor/index.rst
   waspas/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   pyrepo_mcda.mcda_methods.CODAS
   pyrepo_mcda.mcda_methods.EDAS
   pyrepo_mcda.mcda_methods.MABAC
   pyrepo_mcda.mcda_methods.MULTIMOORA
   pyrepo_mcda.mcda_methods.SPOTIS
   pyrepo_mcda.mcda_methods.TOPSIS
   pyrepo_mcda.mcda_methods.VIKOR
   pyrepo_mcda.mcda_methods.WASPAS




.. py:class:: CODAS(normalization_method=linear_normalization, distance_metric=euclidean, tau=0.02)

   Bases: :py:obj:`pyrepo_mcda.mcda_methods.mcda_method.MCDA_method`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: __call__(self, matrix, weights, types)

      Score alternatives provided in decision matrix `matrix` with m alternatives and n criteria
      using criteria `weights` and criteria `types`.

      :param matrix: Decision matrix with m alternatives in rows and n criteria in columns.
      :type matrix: ndarray
      :param weights: Vector with criteria weights. Sum of weights must be equal to 1.
      :type weights: ndarray
      :param types: Vector with criteria types. Profit criteria are represented by 1 and cost by -1.
      :type types: ndarray

      :returns: Vector with preference values of each alternative. The best alternative has the highest preference value.
      :rtype: ndrarray


   .. py:method:: _psi(self, x)


   .. py:method:: _codas(self, matrix, weights, types, normalization_method, distance_metric)
      :staticmethod:



.. py:class:: EDAS

   Bases: :py:obj:`pyrepo_mcda.mcda_methods.mcda_method.MCDA_method`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: __call__(self, matrix, weights, types)

      Score alternatives provided in decision matrix `matrix` using criteria `weights` and criteria `types`.

      :param matrix: Decision matrix with m alternatives in rows and n criteria in columns.
      :type matrix: ndarray
      :param weights: Vector with criteria weights. Sum of weights must be equal to 1.
      :type weights: ndarray
      :param types: Vevtor with criteria types. Profit criteria are represented by 1 and cost by -1.
      :type types: ndarray

      :returns: Vector with preference values of each alternative. The best alternative has the highest preference value.
      :rtype: ndrarray


   .. py:method:: _edas(matrix, weights, types)



.. py:class:: MABAC(normalization_method=minmax_normalization)

   Bases: :py:obj:`pyrepo_mcda.mcda_methods.mcda_method.MCDA_method`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: __call__(self, matrix, weights, types)

      Score alternatives provided in decision matrix `matrix` using criteria `weights` and criteria `types`.

      :param matrix: Decision matrix with m alternatives in rows and n criteria in columns.
      :type matrix: ndarray
      :param weights: Vector with criteria weights. Sum of weights must be equal to 1.
      :type weights: ndarray
      :param types: Vector with criteria types. Profit criteria are represented by 1 and cost by -1.
      :type types: ndarray

      :returns: Vector with preference values of each alternative. The best alternative has the highest preference value.
      :rtype: ndrarray


   .. py:method:: _mabac(matrix, weights, types, normalization_method)



.. py:class:: MULTIMOORA(compromise_rank_method=dominance_directed_graph)

   Bases: :py:obj:`pyrepo_mcda.mcda_methods.mcda_method.MCDA_method`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: __call__(self, matrix, weights, types)

      Score alternatives provided in decision matrix `matrix` using vector with criteria weights
      `weights` and vector with criteria types `types`.

      :param matrix: Decision matrix with m alternatives in rows and n criteria in columns.
      :type matrix: ndarray
      :param weights: Criteria weights. Sum of weights must be equal to 1.
      :type weights: ndarray
      :param types: Criteria types. Profit criteria are represented by 1 and cost by -1.
      :type types: ndarray

      :returns: Preference values of each alternative. The best alternative has the highest preference value.
      :rtype: ndrarray


   .. py:method:: _multimoora(matrix, weights, types, compromise_rank_method)



.. py:class:: SPOTIS

   Bases: :py:obj:`pyrepo_mcda.mcda_methods.mcda_method.MCDA_method`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: __call__(self, matrix, weights, types, bounds)

      Score alternatives provided in decision matrix `matrix` using criteria `weights` and criteria `types`.

      :param matrix: Decision matrix with m alternatives in rows and n criteria in columns.
      :type matrix: ndarray
      :param weights: Vector with criteria weights. Sum of weights must be equal to 1.
      :type weights: ndarray
      :param types: Vector with criteria types. Profit criteria are represented by 1 and cost by -1.
      :type types: ndarray
      :param bounds: Bounds is ndarray with 2 rows and number of columns equal to criteria number.
                     Bounds contain minimum values in the first row and maximum values in the second row
                     for each criterion. Minimum and maximum values for the same criterion cannot be
                     the same.
      :type bounds: ndarray

      :returns: Vector with preference values of each alternative. The best alternative has the lowest preference value.
      :rtype: ndrarray


   .. py:method:: _spotis(matrix, weights, types, bounds)
      :staticmethod:



.. py:class:: TOPSIS(normalization_method=minmax_normalization, distance_metric=euclidean)

   Bases: :py:obj:`pyrepo_mcda.mcda_methods.mcda_method.MCDA_method`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: __call__(self, matrix, weights, types)

      Score alternatives provided in decision matrix `matrix` with m alternatives in rows and
      n criteria in columns using criteria `weights` and criteria `types`.

      :param matrix: Decision matrix with m alternatives in rows and n criteria in columns.
      :type matrix: ndarray
      :param weights: Vector with criteria weights. Sum of weights must be equal to 1.
      :type weights: ndarray
      :param types: Vector with criteria types. Profit criteria are represented by 1 and cost by -1.
      :type types: ndarray

      :returns: Vector with preference values of each alternative. The best alternative has the highest preference value.
      :rtype: ndrarray


   .. py:method:: _topsis(matrix, weights, types, normalization_method, distance_metric)
      :staticmethod:



.. py:class:: VIKOR(normalization_method=None, v=0.5)

   Bases: :py:obj:`pyrepo_mcda.mcda_methods.mcda_method.MCDA_method`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: __call__(self, matrix, weights, types)

      Score alternatives provided in decision matrix `matrix` using criteria `weights` and criteria `types`.

      :param matrix: Decision matrix with m alternatives in rows and n criteria in columns.
      :type matrix: ndarray
      :param weights: Vector with criteria weights. Sum of weights must be equal to 1.
      :type weights: ndarray
      :param types: Vector with criteria types. Profit criteria are represented by 1 and cost by -1.
      :type types: ndarray

      :returns: Vector with preference values of each alternative. The best alternative has the lowest preference value.
      :rtype: ndrarray


   .. py:method:: _vikor(matrix, weights, types, normalization_method, v)
      :staticmethod:



.. py:class:: WASPAS(normalization_method=linear_normalization, lambda_param=0.5)

   Bases: :py:obj:`pyrepo_mcda.mcda_methods.mcda_method.MCDA_method`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: __call__(self, matrix, weights, types)

      Score alternatives provided in decision matrix `matrix` with m alternatives and n criteria
      using criteria `weights` and criteria `types`.

      :param matrix: Decision matrix with m alternatives in rows and n criteria in columns.
      :type matrix: ndarray
      :param weights: Vector with criteria weights. Sum of weights must be equal to 1.
      :type weights: ndarray
      :param types: Vector with criteria types. Profit criteria are represented by 1 and cost by -1.
      :type types: ndarray

      :returns: Vector with preference values of each alternative. The best alternative has the highest preference value.
      :rtype: ndrarray


   .. py:method:: _waspas(matrix, weights, types, normalization_method, lambda_param)
      :staticmethod:



