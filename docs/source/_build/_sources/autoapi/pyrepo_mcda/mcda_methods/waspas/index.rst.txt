:py:mod:`pyrepo_mcda.mcda_methods.waspas`
=========================================

.. py:module:: pyrepo_mcda.mcda_methods.waspas


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pyrepo_mcda.mcda_methods.waspas.WASPAS




.. py:class:: WASPAS(normalization_method=linear_normalization, lambda_param=0.5)

   Bases: :py:obj:`pyrepo_mcda.mcda_methods.mcda_method.MCDA_method`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: __call__(self, matrix, weights, types)

      Score alternatives provided in decision matrix `matrix` with m alternatives and n criteria
      using criteria `weights` and criteria `types`.

      :param matrix: Decision matrix with m alternatives in rows and n criteria in columns.
      :type matrix: ndarray
      :param weights: Vector with criteria weights. Sum of weights must be equal to 1.
      :type weights: ndarray
      :param types: Vector with criteria types. Profit criteria are represented by 1 and cost by -1.
      :type types: ndarray

      :returns: Vector with preference values of each alternative. The best alternative has the highest preference value.
      :rtype: ndrarray


   .. py:method:: _waspas(matrix, weights, types, normalization_method, lambda_param)
      :staticmethod:



